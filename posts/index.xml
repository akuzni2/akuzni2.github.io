<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Codersteez</title>
    <link>https://akuzni2.github.io/posts/</link>
    <description>Recent content in Posts on Codersteez</description>
    <image>
      <url>https://akuzni2.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://akuzni2.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 17 Jan 2022 12:24:27 -0600</lastBuildDate><atom:link href="https://akuzni2.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A Tour of Go Exercise Solutions</title>
      <link>https://akuzni2.github.io/posts/tour-of-go/</link>
      <pubDate>Fri, 25 Jun 2021 11:30:03 +0000</pubDate>
      
      <guid>https://akuzni2.github.io/posts/tour-of-go/</guid>
      <description>As I am going through the Tour of Go I found there are some exercise that require some problem solving. I&amp;rsquo;d like to share my solutions that I&amp;rsquo;ve come up with for these. I&amp;rsquo;ll be updating these as I complete the tour of go!
Exercise: Loops and Functions package main import ( &amp;#34;fmt&amp;#34; &amp;#34;math&amp;#34; ) func Sqrt(x float64) float64 { z := 1.0 prevZ := z diff := 0.00000001 for { z -= (z*z - x) / (2*z) if diff &amp;gt; math.</description>
    </item>
    
    <item>
      <title>Beating Java AWS Lambda Cold Starts With GraalVM Native Image and Quarkus</title>
      <link>https://akuzni2.github.io/posts/java/java-graalvm-aws-lambda-coldstart/</link>
      <pubDate>Mon, 17 Jan 2022 12:24:27 -0600</pubDate>
      
      <guid>https://akuzni2.github.io/posts/java/java-graalvm-aws-lambda-coldstart/</guid>
      <description>What we&amp;rsquo;ll be doing: In this article I&amp;rsquo;ll show you how to build a GraalVM native-image to be deployed on AWS Lambda to massively decrease your cold start times.
What&amp;rsquo;s the result? Java AWS Lambda Function with near 200 milliseconds cold start.
Some of the instructions for this article came from following instructions from Quarkus here - however this article explains some of the steps I needed to take to get working and hope it helps you too.</description>
    </item>
    
  </channel>
</rss>
