<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Codersteez</title>
    <link>https://akuzni2.github.io/</link>
    <description>Recent content on Codersteez</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 14 Mar 2023 06:31:18 -0600</lastBuildDate><atom:link href="https://akuzni2.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Techstack2023</title>
      <link>https://akuzni2.github.io/posts/frontend/tech/techstack2023/</link>
      <pubDate>Tue, 14 Mar 2023 06:31:18 -0600</pubDate>
      
      <guid>https://akuzni2.github.io/posts/frontend/tech/techstack2023/</guid>
      <description>After examining many job openings and frontend development trends here are some short and brief notes on what I think some good skills to have for 2023 will be for frontend development
 Creating a design system or component library Web3 frontend stack web3.js, ethers.js TypeScript + React Next.js GraphQL/REST/gRPC Experience with static page generation / server side rendering Golang or Nodejs backend experience for fullstack  </description>
    </item>
    
    <item>
      <title>Gitlab Reusable Pipeline</title>
      <link>https://akuzni2.github.io/posts/devops/gitlab-reusable-pipeline/post/</link>
      <pubDate>Tue, 10 May 2022 11:42:55 -0500</pubDate>
      
      <guid>https://akuzni2.github.io/posts/devops/gitlab-reusable-pipeline/post/</guid>
      <description>creating a reusable pipeline can be very beneficial to reduce duplicate code and also to standardize across other pipelines in the same project or across other projects. For
let&amp;rsquo;s start by defining the reusable pipeline
Create a new pipeline  pipeline.yml
 variables: VAR1: &amp;#34;&amp;#34; VAR2: &amp;#34;&amp;#34; VAR3: &amp;#34;&amp;#34; stages: - stage1 - stage2 - stage3 job_1: stage: stage1 image: name: some-image variables: SOME_VARIABLE_1: &amp;#34;$VAR1&amp;#34; script: - echo &amp;#39;Do something with $SOME_VARIABLE_1 like validate/lint &amp;#39; job_2: stage: stage2 image: name: some-image variables: SOME_VARIABLE_2: &amp;#34;$VAR2&amp;#34; script: - echo &amp;#39;Do something with $SOME_VARIABLE_2 like build/test&amp;#39; job_3: stage: stage3 image: name: some-image variables: SOME_VARIABLE_3: &amp;#34;$VAR3&amp;#34; script: - echo &amp;#39;Do something with $SOME_VARIABLE_3 like deploy to specfic environment based on the input variable&amp;#39; Use The pipeline  .</description>
    </item>
    
    <item>
      <title>Benchmarking Code Review SLAs</title>
      <link>https://akuzni2.github.io/posts/general/code-review-benchmark/post/</link>
      <pubDate>Sat, 15 Jan 2022 19:21:20 -0600</pubDate>
      
      <guid>https://akuzni2.github.io/posts/general/code-review-benchmark/post/</guid>
      <description>Have you ever wondered if your teams code reviews are in line with industry standards? Do you sometimes not know if you&amp;rsquo;re going at a good pace or behind? Having a solid reference to benchmark against can be helpful so I&amp;rsquo;ve gone ahead and done some research and summarized key findings here that I thought might be useful to reference and ponder on.
Review Frequency and Speed Google
 Median 4 MRs per week [1] 80 % reviewers review &amp;lt; 10 MRâ€™s per week [1]  Time to get initial Initial feedback on an MR/PR: Google</description>
    </item>
    
    <item>
      <title>Beating Java AWS Lambda Cold Starts With GraalVM Native Image and Quarkus</title>
      <link>https://akuzni2.github.io/posts/java/java-graalvm-aws-lambda-coldstart/</link>
      <pubDate>Fri, 21 May 2021 12:24:27 -0600</pubDate>
      
      <guid>https://akuzni2.github.io/posts/java/java-graalvm-aws-lambda-coldstart/</guid>
      <description>What we&amp;rsquo;ll be doing: In this article I&amp;rsquo;ll show you how to build a GraalVM native-image to be deployed on AWS Lambda to massively decrease your cold start times.
What&amp;rsquo;s the result? Java AWS Lambda Function with near 200 milliseconds cold start.
Some of the instructions for this article came from following instructions from Quarkus here - however this article explains the steps I needed to take to get working and hope it helps you too.</description>
    </item>
    
    <item>
      <title>A Tour of Go Exercise Solutions</title>
      <link>https://akuzni2.github.io/posts/tour-of-go/</link>
      <pubDate>Sun, 25 Apr 2021 11:30:03 +0000</pubDate>
      
      <guid>https://akuzni2.github.io/posts/tour-of-go/</guid>
      <description>As I am going through the Tour of Go I found there are some exercise that require some problem solving. I&amp;rsquo;d like to share my solutions that I&amp;rsquo;ve come up with for these. I&amp;rsquo;ll be updating these as I complete the tour of go!
Exercise: Loops and Functions package main import ( &amp;#34;fmt&amp;#34; &amp;#34;math&amp;#34; ) func Sqrt(x float64) float64 { z := 1.0 prevZ := z diff := 0.00000001 for { z -= (z*z - x) / (2*z) if diff &amp;gt; math.</description>
    </item>
    
    <item>
      <title>Removing Mill Scale and Seasoning A36 Steel for Pizza/Baking</title>
      <link>https://akuzni2.github.io/posts/food/pizza-steel/post/</link>
      <pubDate>Sat, 06 Feb 2021 19:00:05 -0600</pubDate>
      
      <guid>https://akuzni2.github.io/posts/food/pizza-steel/post/</guid>
      <description>Before I get into the details and my cleaning process - here is a before and after picture of the steel! Looks good right?! Let me explain what I know.
The &amp;ldquo;after&amp;rdquo; picture was taken on the final cleaning step as I was drying the steel. This doesn&amp;rsquo;t yet have any seasoning. Immediately after I did a coat of seasoning. (seasoned pictures of steel at bottom of article)
Pizza steels! Superior to stones.</description>
    </item>
    
    <item>
      <title>Circleci Monorepo</title>
      <link>https://akuzni2.github.io/posts/circleci-monorepo/</link>
      <pubDate>Sun, 03 Jan 2021 13:17:12 -0600</pubDate>
      
      <guid>https://akuzni2.github.io/posts/circleci-monorepo/</guid>
      <description>Monorepo: A shared codebase that stores multiple projects in a single repository.
tldr: Final script is at the bottom of the post if you&amp;rsquo;d like to skip the walkthrough.
At least the above definition is what I think of a monorepo. I see a monorepo as a single repository that has subprojects that generates separate artifacts under each project. Each of these projects can be related or totally unrelated.
Some people frown upon the monorepo concept, however there is some empirical evidence to its usefulness by those who&amp;rsquo;ve adopted them (most notably Google).</description>
    </item>
    
  </channel>
</rss>
